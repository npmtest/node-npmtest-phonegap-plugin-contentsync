{"/home/travis/build/npmtest/node-npmtest-phonegap-plugin-contentsync/test.js":"/* istanbul instrument in package npmtest_phonegap_plugin_contentsync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phonegap-plugin-contentsync/lib.npmtest_phonegap_plugin_contentsync.js":"/* istanbul instrument in package npmtest_phonegap_plugin_contentsync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_phonegap_plugin_contentsync = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_phonegap_plugin_contentsync = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-phonegap-plugin-contentsync/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-phonegap-plugin-contentsync && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_phonegap_plugin_contentsync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_phonegap_plugin_contentsync\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_phonegap_plugin_contentsync.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_phonegap_plugin_contentsync.rollup.js'] =\n            local.assetsDict['/assets.npmtest_phonegap_plugin_contentsync.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_phonegap_plugin_contentsync.__dirname + '/lib.npmtest_phonegap_plugin_contentsync.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phonegap-plugin-contentsync/node_modules/phonegap-plugin-contentsync/www/index.js":"/* global cordova:false */\n\n/*!\n * Module dependencies.\n */\n\nvar exec = cordova.require('cordova/exec');\n\n/**\n * ContentSync constructor.\n *\n * @param {Object} options to initiate a new content synchronization.\n *   @param {String} src is a URL to the content sync end-point.\n *   @param {String} id is used as a unique identifier for the sync operation\n *   @param {Object} type defines the sync strategy applied to the content.\n *     @param {String} replace completely removes existing content then copies new content.\n *     @param {String} merge   does not modify existing content, but adds new content.\n *   @param {Object} headers are used to set the headers for when we send a request to the src URL\n *  @param {Boolean} validateSrc whether to validate src url with a HEAD request before download (ios only, default true).\n * @return {ContentSync} instance that can be monitored and cancelled.\n */\n\nvar ContentSync = function(options) {\n    this._handlers = {\n        'progress': [],\n        'cancel': [],\n        'error': [],\n        'complete': []\n    };\n\n    // require options parameter\n    if (typeof options === 'undefined') {\n        throw new Error('The options argument is required.');\n    }\n\n    // require options.src parameter\n    if (typeof options.src === 'undefined' && options.type !== \"local\") {\n        throw new Error('The options.src argument is required for merge replace types.');\n    }\n\n    // require options.id parameter\n    if (typeof options.id === 'undefined') {\n        throw new Error('The options.id argument is required.');\n    }\n\n    // define synchronization strategy\n    //\n    //     replace: This is the normal behavior. Existing content is replaced\n    //              completely by the imported content, i.e. is overridden or\n    //              deleted accordingly.\n    //     merge:   Existing content is not modified, i.e. only new content is\n    //              added and none is deleted or modified.\n    //     local:   Existing content is not modified, i.e. only new content is\n    //              added and none is deleted or modified.\n    //\n    if (typeof options.type === 'undefined') {\n        options.type = 'replace';\n    }\n\n    if (typeof options.headers === 'undefined') {\n        options.headers = null;\n    }\n\n    if (typeof options.copyCordovaAssets === 'undefined') {\n        options.copyCordovaAssets = false;\n    }\n\n    if (typeof options.copyRootApp === 'undefined') {\n        options.copyRootApp = false;\n    }\n\n    if (typeof options.timeout === 'undefined') {\n        options.timeout = 15.0;\n    }\n\n    if (typeof options.trustHost === 'undefined') {\n        options.trustHost = false;\n    }\n\n    if (typeof options.manifest === 'undefined') {\n        options.manifest = \"\";\n    }\n\n    if (typeof options.validateSrc === 'undefined') {\n        options.validateSrc = true;\n    }\n\n    // store the options to this object instance\n    this.options = options;\n\n    // triggered on update and completion\n    var that = this;\n    var success = function(result) {\n        if (result && typeof result.progress !== 'undefined') {\n            that.emit('progress', result);\n        } else if (result && typeof result.localPath !== 'undefined') {\n            that.emit('complete', result);\n        }\n    };\n\n    // triggered on error\n    var fail = function(msg) {\n        var e = (typeof msg === 'string') ? new Error(msg) : msg;\n        that.emit('error', e);\n    };\n\n    // wait at least one process tick to allow event subscriptions\n    setTimeout(function() {\n        exec(success, fail, 'Sync', 'sync', [options.src, options.id, options.type, options.headers, options.copyCordovaAssets, options.copyRootApp, options.timeout, options.trustHost, options.manifest, options.validateSrc]);\n    }, 10);\n};\n\n/**\n * Cancel the Content Sync\n *\n * After successfully canceling the content sync process, the `cancel` event\n * will be emitted.\n */\n\nContentSync.prototype.cancel = function() {\n    var that = this;\n    var onCancel = function() {\n        that.emit('cancel');\n    };\n    setTimeout(function() {\n        exec(onCancel, onCancel, 'Sync', 'cancel', [ that.options.id ]);\n    }, 10);\n};\n\n/**\n * Listen for an event.\n *\n * The following events are supported:\n *\n *   - progress\n *   - cancel\n *   - error\n *   - completion\n *\n * @param {String} eventName to subscribe to.\n * @param {Function} callback triggered on the event.\n */\n\nContentSync.prototype.on = function(eventName, callback) {\n    if (this._handlers.hasOwnProperty(eventName)) {\n        this._handlers[eventName].push(callback);\n    }\n};\n\n/**\n * Emit an event.\n *\n * This is intended for internal use only.\n *\n * @param {String} eventName is the event to trigger.\n * @param {*} all arguments are passed to the event listeners.\n *\n * @return {Boolean} is true when the event is triggered otherwise false.\n */\n\nContentSync.prototype.emit = function() {\n    var args = Array.prototype.slice.call(arguments);\n    var eventName = args.shift();\n\n    if (!this._handlers.hasOwnProperty(eventName)) {\n        return false;\n    }\n\n    for (var i = 0, length = this._handlers[eventName].length; i < length; i++) {\n        this._handlers[eventName][i].apply(undefined,args);\n    }\n\n    return true;\n};\n\n/*!\n * Content Sync Plugin.\n */\n\nmodule.exports = {\n    /**\n     * Synchronize the content.\n     *\n     * This method will instantiate a new copy of the ContentSync object\n     * and start synchronizing.\n     *\n     * @param {Object} options\n     * @return {ContentSync} instance\n     */\n\n    sync: function(options) {\n        return new ContentSync(options);\n    },\n\n    /**\n     * Unzip\n     *\n     * This call is to replicate Zip::unzip plugin\n     *\n     */\n\n    unzip: function(fileUrl, dirUrl, callback, progressCallback) {\n        var win = function(result) {\n            if (result && result.progress) {\n                if (progressCallback) {\n                    progressCallback(result);\n                }\n            } else if (callback) {\n                callback(0);\n            }\n        };\n        var fail = function(result) {\n            if (callback) {\n                callback(-1);\n            }\n        };\n        exec(win, fail, 'Zip', 'unzip', [fileUrl, dirUrl]);\n    },\n\n    /**\n     * Download\n     *\n     * This call is to replicate nothing but might be used instead of FileTransfer\n     *\n     */\n\n    download: function(url, headers, cb) {\n        var callback = (typeof headers == \"function\" ? headers : cb);\n        exec(callback, callback, 'Sync', 'download', [url, null, headers]);\n    },\n    \n    /**\n     * loadUrl\n     *\n     * This method allows loading file:// urls when using WKWebViews on iOS. \n     *\n     */\n\n    loadUrl: function(url, cb) {\n        if(!url) {\n            throw new Error('URL is required.');\n        }\n        exec(cb, cb, 'Sync', 'loadUrl', [url]);\n    },\n\n\n    /**\n     * ContentSync Object.\n     *\n     * Expose the ContentSync object for direct use\n     * and testing. Typically, you should use the\n     * .sync helper method.\n     */\n\n    ContentSync: ContentSync,\n\n    /**\n     * PROGRESS_STATE enumeration.\n     *\n     * Maps to the `progress` event's `status` object.\n     * The plugin user can customize the enumeration's mapped string\n     * to a value that's appropriate for their app.\n     */\n\n    PROGRESS_STATE: {\n        0: 'STOPPED',\n        1: 'DOWNLOADING',\n        2: 'EXTRACTING',\n        3: 'COMPLETE'\n    },\n\n    /**\n     * ERROR_STATE enumeration.\n     *\n     * Maps to the `error` event's `status` object.\n     * The plugin user can customize the enumeration's mapped string\n     * to a value that's appropriate for their app.\n     */\n\n    ERROR_STATE: {\n        1: 'INVALID_URL_ERR',\n        2: 'CONNECTION_ERR',\n        3: 'UNZIP_ERR'\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap-plugin-contentsync/node_modules/phonegap-plugin-contentsync/src/browser/Sync.js":"function notSupported() {\n    console.log('ContentSync is not supported on browser platform');\n}\n\nvar ContentSync = function() {};\nContentSync.prototype.on = function() { notSupported(); };\nContentSync.prototype.emit = function() { notSupported(); };\nContentSync.prototype.cancel = function() { notSupported(); };\n\nfunction sync() {\n    notSupported();\n    return new ContentSync();\n}\n\nmodule.exports = {\n    sync: sync,\n    unzip: notSupported,\n    download: notSupported,\n    ContentSync: ContentSync\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap-plugin-contentsync/node_modules/phonegap-plugin-contentsync/src/windows/SyncProxy.js":"// progress-state \n// 0:stopped, 1:downloading,2:extracting,3:complete\n\n// error-state\n// 1:invalid url\n// 2:connection err\n// 3:unzip err\n\n\nvar appData = Windows.Storage.ApplicationData.current;\nvar FileOpts = Windows.Storage.CreationCollisionOption;\nvar getFolderFromPathAsync = Windows.Storage.StorageFolder.getFolderFromPathAsync;\nvar getFileFromPathAsync = Windows.Storage.StorageFile.getFileFromPathAsync;\nvar replaceExisting = Windows.Storage.NameCollisionOption.replaceExisting;\nvar AppPath = Windows.ApplicationModel.Package.current.installedLocation.path;\n\nfunction cleanPath(pathStr) {\n    return pathStr.replace(/\\//g, \"\\\\\");\n}\n\nfunction copyAndReplaceFileFromPathAsync(path,dest) {\n    return Windows.Storage.StorageFile.getFileFromPathAsync(path)\n    .then(function (file) {\n        return file.copyAsync(dest, file.name, Windows.Storage.NameCollisionOption.replaceExisting);\n    });\n}\n\nfunction copyCordovaAssetsAsync(wwwFolder, destWWWFolder) {\n    return getFolderFromPathAsync(wwwFolder.path + \"\\\\plugins\")\n    .then(function (pluginsFolder) {\n        return WinJS.Promise.join([recursiveCopyFolderAsync(pluginsFolder, destWWWFolder, null, false),\n                                   copyAndReplaceFileFromPathAsync(wwwFolder.path + \"\\\\cordova.js\", destWWWFolder),\n                                   copyAndReplaceFileFromPathAsync(wwwFolder.path + \"\\\\cordova_plugins.js\", destWWWFolder)]);\n    });\n}\n\n// this can throw exceptions, callers responsibility\nfunction startDownload(src, storageFile) {\n    var uri = Windows.Foundation.Uri(src);\n    var downloader = new Windows.Networking.BackgroundTransfer.BackgroundDownloader();\n    var download = downloader.createDownload(uri, storageFile);\n    return download.startAsync();\n}\n\nfunction recursiveCopyFolderAsync(src, dst, name, skipRoot) {\n    name = name ? name : src.name;\n\n    var getDestFolder = function () { return WinJS.Promise.wrap(dst); };\n    if (!skipRoot) {\n        getDestFolder = function () {\n            return dst.createFolderAsync(name, FileOpts.openIfExists)\n        }\n    }\n\n    return new WinJS.Promise(function (complete, failed) {\n        WinJS.Promise.join({\n            destFolder: getDestFolder(),\n            files: src.getFilesAsync(),\n            folders: src.getFoldersAsync()\n        })\n        .done(function (resultObj) {\n            //console.log(\"destFolder = \" + resultObj.destFolder.path);\n            if (!(resultObj.files.length || resultObj.folders.length)) {\n                // nothing to copy\n                complete();\n                return 1;\n            }\n            var fileCount = resultObj.files.length;\n            var copyfolders = function () {\n                if (!fileCount--) {\n                    complete();\n                    return 2;\n                }\n                recursiveCopyFolderAsync(resultObj.folders[fileCount], resultObj.destFolder)\n                .done(function () {\n                    copyfolders();\n                }, failed);\n            };\n            var copyfiles = function () {\n                if (!fileCount--) {\n                    // done with files, move on to folders\n                    fileCount = resultObj.folders.length;\n                    copyfolders();\n                    return 3;\n                }\n                var file = resultObj.files[fileCount];\n                //console.log(\"copying \" + file.name + \" => \" + resultObj.destFolder.name);\n                file.copyAsync(resultObj.destFolder || dst, file.name, replaceExisting)\n                .done(function () {\n                    copyfiles();\n                }, failed);\n            };\n            copyfiles();\n        },\n        failed);\n    });\n}\n\n\nvar Sync = {\n    sync: function (cbSuccess, cbFail, options) {\n\n        // Note, all defaults are set in base file www/index.js\n        // so we can proceed knowing these are all defined.\n        // options = [ src,id,type,headers,bCopyCordovaAssets,bCopyRootApp,timeout] ;\n\n        var src = options[0];\n        var id = cleanPath(options[1]);\n        var type = options[2];\n        var headers = options[3];\n        var bCopyCordovaAssets = options[4];\n        var bCopyRootApp = options[5];\n        var timeout = options[6];\n        var trustHost = options[7];\n        var manifest = options[8];\n\n        var destFolderPath = cleanPath(id);\n        var rootTempFolder = null;\n\n        var destFolder = null;\n        var destZipFile = null;\n        var destWWWFolder = null;\n        var fileName = id;\n\n        if (id.indexOf(\"\\\\\") > -1) {\n            var pathParts = id.split(\"\\\\\");\n            fileName = pathParts.pop();\n        }\n\n        if (fileName.indexOf(\".zip\") < 0) { // todo, could be some.zip/file ...\n            fileName += \".zip\";\n        }\n\n        var folderExisted = false;\n        function getOrCreateLocalFolder(folderPath) {\n            console.log(\"folderPath = \" + folderPath);\n            return appData.localFolder.getFolderAsync(folderPath)\n            .then(function (folder) {\n                folderExisted = true;\n                return folder;\n            },\n            function (err) {\n                // folder does not exist, let's create it\n                console.log(\"error: \" + err.description);\n                return appData.localFolder.createFolderAsync(folderPath)\n                .then(function (folder) {\n                    return folder;\n                },\n                function (err) {\n\n                });\n            });\n        }\n\n        WinJS.Promise.join({\n            wwwFolder: getFolderFromPathAsync(AppPath + \"\\\\www\"),\n            destFolder: getOrCreateLocalFolder(destFolderPath),\n            destWWWFolder: getOrCreateLocalFolder(destFolderPath + \"\\\\www\")\n        }).done(function (res) {\n            if (folderExisted && type == 'local') {\n                // get out of the promise chain\n                cbSuccess({ 'localPath': destFolderPath, 'status': 3 }, { keepCallback: false });\n            }\n            else {\n                destFolder = res.destFolder;\n                wwwFolder = res.wwwFolder;\n                destWWWFolder = res.destWWWFolder;\n\n                var job = WinJS.Promise.wrap(null);\n                if (bCopyRootApp) {\n                    job = recursiveCopyFolderAsync(wwwFolder, destFolder, \"www\", true);\n                }\n                else {\n\n                }\n\n                job = job.then(function () {\n                    return destFolder.createFileAsync(fileName, FileOpts.replaceExisting).then(function (storageFile) {\n                        destZipFile = storageFile;\n                    },\n                    function (err) {\n                        console.log(err);\n                    });\n                });\n                job = job.then(function (res) {\n                    try {\n                        if (src) {\n                            return startDownload(src, destZipFile);\n                        }\n                        else {\n                            return false;\n                        }\n                    } catch (e) {\n                        console.log(e.message);\n                        cbFail(1); // INVALID_URL_ERR\n                    }\n                }).then(function downloadComplete(dlResult) { // download is done\n                    if (dlResult) {\n                        //console.log(\"download is complete \" + dlResult);\n                        cbSuccess({ 'progress': 50, 'status': 2 }, { keepCallback: true }); // EXTRACTING\n\n                        return ZipWinProj.PGZipInflate.inflateAsync(dlResult.resultFile, destFolder)\n                        .then(function (obj) {\n                            //console.log(\"got a result from inflateAsync :: \" + obj);\n                            return true;\n                        },\n                        function (e) {\n                            //console.log(\"got err from inflateAsync :: \" + e);\n                            cbFail(3); // UNZIP_ERR\n                            return false;\n                        });\n                    }\n                    else {\n                        return false;\n                    }\n\n                },\n                function (err) {   // download error\n                    console.log(err);\n                    cbFail(1); // INVALID_URL_ERR\n                    return false;\n                },\n                function (progressEvent) {\n                    var total = progressEvent.progress.totalBytesToReceive;\n                    var bytes = progressEvent.progress.bytesReceived;\n                    var progPercent = total ? Math.round(bytes / total * 50) : 0;\n                    cbSuccess({ 'progress': progPercent, 'status': 1 }, { keepCallback: true });    // 0:stopped, 1:downloading, 2:extracting,  3:complete\n                })\n                .then(function maybeCopyCordovaAssets(res) {\n                    return bCopyCordovaAssets ? copyCordovaAssetsAsync(wwwFolder, destWWWFolder) : null;\n                },\n                function (err) { \n                    console.log(\"got err  : \" + err);\n                })\n                .then(function (boom) {\n                    cbSuccess({ 'localPath': destFolder, 'status': 3 }, { keepCallback: false });\n                })\n\n            }\n        },\n        function (err) {\n            console.log(\"Error: \" + err.description);\n            cbFail(2);\n        });\n    },\n    cancel: function (cbSuccess, cbFail, options) {\n        var id = options.id;\n        if (DownloadQueue[id]) {\n\n            var downloadJob = DownloadQueue[id];\n            if (!downloadJob.isCancelled) { // prevent multiple callbacks for the same cancel\n                downloadJob.isCancelled = true;\n                if (!downloadJob.request) {\n                    // todo: abort it\n                }\n                DownloadQueue[id] = null;\n            }\n            cbSuccess();\n        }\n        else {\n            // TODO: error, id not found\n            cbFail();\n        }\n    },\n    download: function (cbSuccess, cbFail, options) {\n        var url = options[0];\n        var unknown = options[1];\n        var headers = options[2];\n    },\n    unzip: function (cbSuccess, cbFail, options) {\n        var srcUrl = options[0];\n        var destUrl = options[1];\n    }\n};\n\n\n\nrequire(\"cordova/exec/proxy\").add(\"Sync\", Sync);\nrequire(\"cordova/exec/proxy\").add(\"Zip\", Sync);\n"}